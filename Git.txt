
=========================Introduction 

GIT: GLOBAL INFORMATION TRACKER.

VCS: VERSION CONTROL SYSTEM
It will keep the code separately for each version.

v-1 : 100 lines ---> store (repo-1)
v-2 : 200 lines ---> store (repo-2)
v-3 : 300 lines ---> store (repo-3)

REPO: It is a folder where we store our code.
index.html: It is a basic file for every application.

v1 ---> index.html
v2 ---> index.html
v3 ---> index.html




Here is the extracted text:

INTRO:
Git is used to track the files.
It will maintain multiple versions of the same file.
It is platform-independent.
It is free and open-source.
They can handle larger projects efficiently.
It is 3rd generation of VCS.
It is written on C programming.
It came on the year 2005.


CVCS: CENTRALIZED VERSION CONTROL SYSTEM
EX: SVN: it can store code on a single repo.

DVCS: DISTRIBUTED VERSION CONTROL SYSTEM
EX: GIT: it can store code on Multiple repo.

ROLLBACK: Going back to the previous version of the application.


==========================STAGES:
WORKING DIRECTORY: where we write our source code.
STAGING AREA: we track files here.
REPOSITORY: where we store tracked source code.



========================WORKING WITH GIT:

create a ec2 server:
mkdir swiggy
cd swiggy

Install Git:
yum install git -y   [yum=pkg manager, install=action, git=pkg name, -y=yes]
git -v               : to check version
git init             : to install .git (local repo)

===============================Steps to create and manage a file in Git:

To create a file: vim index.html (content is opt)

To check status: git status

To track the file: git add index.html

To check status again: git status

To store the file: git commit -m "commit-1" index.html

Summary:  create a file --> add --> commit


To show commits: git log

To show last 2 commits: git log -2

To show commits in a single line: git log -2 --oneline



====================CONFIGURING USER AND EMAIL:

git config user.name "raham"
git config user.email "raham@gmail.com"

NOTE: this user and email will be replicated to new commits only.

Git show: used to show the files which are attached to commits.
git log --online
git show commit_id


======================BRANCHES:

It is an individual line of development.
Developers write the code on branches.
Initially, branches are created on Git.
After writing source code on Git, we push it to GitHub.
The default branch is Master.

Note: When we do an initial commit, the only default branch will be created.

Dev --> Git (Movies branch) --> Code --> GitHub

COMMANDS:

git branch            : to list the branches
git branch movies     : to create the branch "movies"
git checkout movies   : to switch between the branches
git checkout -b dth	: to create and switch dth at same time
git branch -m old new	: to rename a branch
git branch -D recharge	: to delete a branch

NOTE: to recover the delete branch

GIT PULL: it will get the branch from github to git
git pull origin recharge
git checkout recharge





===================PROCESS:

git branch movies
git checkout movies
touch movies{1..5}
git add movies
git commit -m "dev-1" movies


NOW PUSH THE CODE TO GITHUB:
# Create a repo
git remote add origin https://github.com/nayakdebasish091/paytm.git

# PUSH: to send files from git to github
# local: .git & remote: paytm.git
git push origin movies


====================TOKEN GENERATION:
account -> settings -> developer settings -> PAT -> Classic -> Generate new token -> classic -> name: abcd -> select 6 options -> generate
Note: it will be visible only once





create branch
switch to branch
files
add
commit
push

GIT IGNORE: it will not track the files which we want.
touch java{1..5}
vim .gitignore
j* -- > :wq
git status
you cant see the files now 


GIT RESTORE: to untrack the tracked file
touch raham
git status
git add
git status
git restore --staged raham
git status


GET BACK THE DELETED FILE:
Note: we can restore only tracked files.


